# === Multistage Dockerfile Overview ==================================================

# A multistage Dockerfile uses multiple stages to build an image
# Allows users to separate the build environment from the runtime environment (Helps reduce the size of the final image by only including the artifacts needed for the application to run
# Excludes any unnecessary build dependencies and intermediate files generated during the build process
# Allows you to use different base images for different stages of the build process
# Reduces the attack surface by minimizing the runtime image since only the necessary components are included (Helps in creating efficient and secure Docker images)

# === Stage 1: Build Stage ============================================================

# The primary goal of the build stage is to use any necessary tools and processes to create the artifacts that need to be part of the final image, without including the tools themselves in that image
# This is where you prepare everything needed to complile, build, or otherwise prepare your application
# Where you install the compilers, bundlers, or minifiers that are only necessary to prepare your application but are not needed for running it
# Where source code is transformed into executable code
# Where you download and install the libraries or modules needed for the application (In many cases, these dependencies are prepared or built in a way that's only needed for the final artifact)

# === Stage 2: Runtime Stage ==========================================================

# The primary goal for the runtime stage is to create a slim, secure, and optimized image that contains nothing more than what's necessary to run the application
# The image in this stage often only contains the minimal set of executable or a set of compiled files
# This stage may involve copying over only the artifacts needed from the build stage (An executable, A set of compiled files, etc.)
